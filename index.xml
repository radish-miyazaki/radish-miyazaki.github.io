<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>method_missing(*)</title>
    <link>https://radish-miyazaki.github.io/</link>
    <description>Recent content on method_missing(*)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>2022 Radish All rights reserved</copyright>
    <lastBuildDate>Thu, 17 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://radish-miyazaki.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variance and TypeScript</title>
      <link>https://radish-miyazaki.github.io/2022/03/17/covariance_and_typescript/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://radish-miyazaki.github.io/2022/03/17/covariance_and_typescript/</guid>
      <description>概要 型について理解を深める上で必要不可欠となる変性（Variance）をTypescriptを通して学んだので、まとめておく。
 サブタイプとスーパータイプ まずは変性について学ぶ上で、知っておくべき基本的な用語から触れていく。
サブタイプ A, Bという2つの型があり、BがAのサブタイプである場合、Aが要求されているところはどこでも、Bを安全に使うことができる。
TypeScriptによる例を以下に示す。
 配列はオブジェクトのサブタイプ タプルは配列のサブタイプ 全ての値はanyのサブタイプ neverは全ての値のサブタイプ Animalを拡張するBirdというクラスがある場合、BirdはAnimalのサブタイプ  スーパータイプ A, Bという2つの型があり、BがAのスーパータイプである場合、Bが要求されているところ はどこでも、Aを安全に使うことができる。
TypeScriptによる例を以下に示す。
 オブジェクトは配列のスーパータイプ 配列はタプルのスーパータイプ anyは全ての値のスーパータイプ すべての値はneverのスーパータイプ AnimalはBirdのスーパータイプ   変性とは 型同士の関係性（型Aを指定したときに、そのサブタイプである型Bを当てはめられるかどうか）を判別するルールは、プログラム言語間で大きな相違点となっている。</description>
    </item>
    
    <item>
      <title>Map type &amp; Utility</title>
      <link>https://radish-miyazaki.github.io/2022/03/10/map_type/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://radish-miyazaki.github.io/2022/03/10/map_type/</guid>
      <description>概要 前回の社内勉強会でMap型が話題に上がり、自分の復習のためにまとめる。
マップ型とは オブジェクトのキーの値とプロパティの型を指定することができる。 以下に例を示す。
type Weekday = &amp;#39;Mon&amp;#39; | &amp;#39;Tue&amp;#39; | &amp;#39;Wed&amp;#39; | &amp;#39;Thu&amp;#39; | &amp;#39;Fri&amp;#39; type Day = Weekday | &amp;#39;Sat&amp;#39; | &amp;#39;Sun&amp;#39; // 現在の曜日と次の曜日の組み合わせ let nextDay: {[K in Weekday]: Day} = { Mon: &amp;#39;Tue&amp;#39; } 上記は以下のようなエラーを示す。</description>
    </item>
    
    <item>
      <title>What&#39;s type declaration</title>
      <link>https://radish-miyazaki.github.io/2022/03/03/ts_type_declaration/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://radish-miyazaki.github.io/2022/03/03/ts_type_declaration/</guid>
      <description>概要 .d.tsファイルや その内部に記述されている処理を今までフィーリングで扱っていたので学びなおした。
コードは一切出て来ないよ！
 型宣言とは ライブラリなどでよく見かける「.d.ts」という拡張子を持つファイル や スクリプトモードのファイル（.tsファイル） に存在している宣言。
これはJSDocアノテーションと同様、型付けされていないJavaScriptコードにTypeScriptの型を結びつけるための方法である。
Definitely Typedでは様々なパッケージの型宣言ファイルが公開されている。
 通常のTypeScriptの構文の違い 通常のTypeScriptの構文とは少し異なる箇所がある。
 型宣言は型だけを含むことができ、値を含むことはできない  関数・クラス・オブジェクト・変数の実装を持つことはできず、パラメータのデフォルト値を持つことも出来ない。
型宣言は、JavaScript内のどこかで定義される値が「存在する」ことは宣言できる  専用のキーワードdeclareを使う。
型宣言は、利用者から見えるものについての型だけを宣言する  エクスポートされない型や、関数の本体内のローカル変数の型のようなものは含まない。
 型宣言ファイルの用途 型宣言ファイルは以下の用途で使われている。
 どのような型が存在しているかTypeScriptに伝える  コンパイルされたTypeScriptを、ユーザがTypeScriptアプリケーションから使用する時に、 ユーザのTSCインスタンスは、生成されたJavaScriptファイルに対応する.</description>
    </item>
    
    <item>
      <title>Type alias vs Interface</title>
      <link>https://radish-miyazaki.github.io/2022/02/24/ts_interface/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://radish-miyazaki.github.io/2022/02/24/ts_interface/</guid>
      <description>概要 社内で「TypeScriptの インタフェース と 型エイリアス の違いが上手くわからない！」 という声が上がっていたので、まとめておく。
同じところを認識したうえで、違う箇所を見たほうが頭に残るかなということで、両方見ていこう。 まずは、同じところから。
 同じところ 型エイリアスを使っている箇所はどこでも、インタフェースを使うことができる。
どちらの宣言も形状を定義しており、それらの形状は互いに割り当てが可能。
// 型エイリアス type Sushi = { calories: number salty: boolean tasty: boolean } // インタフェース interface Sushi { calories: number salty: boolean tasty: boolean } 更にどちらも型を組み合わせることもできる。まずは型エイリアスから見てみる。</description>
    </item>
    
    <item>
      <title>Ruby Null Object</title>
      <link>https://radish-miyazaki.github.io/2022/02/18/ruby_null_object/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://radish-miyazaki.github.io/2022/02/18/ruby_null_object/</guid>
      <description>Null Objectとは Null Objectとは、「何もしないメソッド」を持つオブジェクトのこと。
クラスベースのオブジェクト指向言語（Java, C#など）だと時折見かける。
class Huga def huga &amp;#39;huga&amp;#39; end end class NullHuga def huga; end end class Hoge def process_huga(huga) # create_hugaはhuga or nullを返す設定 create_huga || NullHuga.new end end	Null Objectのメソッドを呼び出すと、エラーを出さずにメッセージをゴミ箱に捨ててくれる。</description>
    </item>
    
  </channel>
</rss>
